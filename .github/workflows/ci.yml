name: CI

# This workflow uses a custom Docker container with CBC dependencies pre-installed
# to avoid downloading and installing system packages on every CI run.

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  build-ci-image:
    name: Build CI Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ci
        push: true
        tags: ghcr.io/${{ github.repository }}-ci:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Output image name
      id: image
      run: echo "image=ghcr.io/${{ github.repository }}-ci:latest" >> $GITHUB_OUTPUT

  test:
    needs: build-ci-image
    name: Test
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-ci-image.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root  # Needed for some GitHub Actions
    
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-build-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-build-
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      continue-on-error: true  # Show formatting issues as warnings, not failures
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      continue-on-error: true  # Show clippy issues as warnings, not failures
