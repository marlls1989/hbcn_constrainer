use super::ast::*;
use crate::Symbol;
use crate::hbcn::CircuitNode;

grammar;

pub AdjencyList: AdjencyList = {
    Edge*
}

Edge: AdjencyEntry = {
    <source:Transition> <delay:DelayPair> <target:Transition> => AdjencyEntry::new(source, delay, target),
}

Transition: Transition = {
    "+" <Node> => Transition::Data(<>),
    "-" <Node> => Transition::Spacer(<>),
}

DelayPair: DelayPair = {
    "=(" <min:Num> "," <max:Num> ")>" => DelayPair::new(Some(min), Some(max)),
    "=(" <min:Num> "," ")>" => DelayPair::new(Some(min), None),
    "=(" "," <max:Num> ")>" => DelayPair::new(None, Some(max)),
    "=(" "," ")>" => DelayPair::new(None, None),
}

Node: Symbol = {
    "{" <node:Str> "}" => node,
}

Str: Symbol = {
    <s:r#""[^"]*""#> => Symbol::from(&s[1 .. s.len()-1]),
}

Num: f64 = {
    <i:r"[0-9]+(?:\.[0-9]+)?"> => i.parse().unwrap(),
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

// Local Variables:
// mode: rust
// End:
