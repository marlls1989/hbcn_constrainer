use super::ast::*;
use crate::Symbol;
use crate::hbcn::CircuitNode;

grammar;

pub AdjacencyList: AdjacencyList = {
    Edge*
}

Edge: AdjacencyEntry = {
    <source:Transition> "=>" <target:Transition> ":" <delay:Delay> => AdjacencyEntry::new(source, delay, target, false),
    "*" <source:Transition> "=>" <target:Transition> ":" <delay:Delay> => AdjacencyEntry::new(source, delay, target, true),
}

Transition: Transition = {
    "+" <Node> => Transition::Data(<>),
    "-" <Node> => Transition::Spacer(<>),
}

Delay: DelayPair = {
    "(" <min:Num> "," <max:Num> ")" => DelayPair::new(Some(min), max),
    <max:Num> => DelayPair::new(None, max),
}

Node: Symbol = {
    <s:r#"\{(?:\\[{}]|[^}])*\}"#> => {
        let content = &s[1 .. s.len()-1];
        // Unescape TCL-style braces: \{ -> {, \} -> }
        let unescaped = content.replace("\\{", "{").replace("\\}", "}");
        Symbol::from(unescaped)
    },
}

Str: Symbol = {
    <s:r#""[^"]*""#> => Symbol::from(s[1 .. s.len()-1].to_string()),
}

Num: f64 = {
    <i:r"[0-9]+(?:\.[0-9]+)?"> => i.parse().unwrap(),
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

// Local Variables:
// mode: rust
// End:
